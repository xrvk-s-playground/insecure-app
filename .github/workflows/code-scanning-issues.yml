name: Create issues from code scanning results

####
# This workflow gets the latest code scanning results from the current
# repository over the last 24 hours, and transfers results into issues
####

on:
  #workflow_dispatch:
  push:
  schedule:
  - cron: "30 1 * * *"

jobs:
  issue-creation:

    runs-on: ubuntu-latest

    steps:
        
    # Get all code scanning alerts
    - name: Get code scanning alerts
      uses: octokit/request-action@v2.x
      id: get_repo_alerts
      with:
        route: GET /repos/:repository/code-scanning/alerts
        repository: ${{ github.repository }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Save code scanning alerts in an environment variable
      env:
        JSON_RETURNED: ${{ steps.get_repo_alerts.outputs.data }}
      run: |
        echo $JSON_RETURNED | jq -r '.[].number' | while read number ; do
          num=`echo $number`
          echo $num
        done
        
        echo $num
        
        
        
    # Loop through every node. For each node create an issue if it doesn't already exist
    #- name: Create issues
    #  run: |
    #    echo $alert_nodes | jq -r '.[].id' | while read id ; do
    #      echo $id
    #    done
        
    # JSON_ARRAY=`echo $alert_nodes| jq '.nodes'`
    # Create issues for each alert created in the past 24 hours
    #- name: Create issue from code scanning alerts
    #  uses: maxkomarychev/oction-create-issue@v0.7.1
    #  id: create_issues
    #  with:
    #    token: ${{ secrets.GITHUB_TOKEN }}
    #    title: ${{ steps.get_filtered_alerts.outputs.data.repository.vulnerabilityAlerts }}
    #    body: ${{ steps.get_filtered_alerts.outputs.data }}
  
  
    #- name: Checkout repository
    #  uses: actions/checkout@v2
    #  with:
    #    # We must fetch at least the immediate parents so that if this is
    #    # a pull request then we can checkout the head.
    #    fetch-depth: 2
      
    
    #- name: Get Repo Security Vulnerability Alerts
    #  uses: octokit/graphql-action@v2.x
    #  id: get_filtered_alerts
    #  with:
    #    query: |
    #      query release($owner:String!,$repo:String!) {
    #          repository(owner:$owner,name:$repo) {
    #            vulnerabilityAlerts(first:100) {
    #              nodes {
    #                id
    #                createdAt
    #                securityAdvisory {
    #                  description
    #                  ghsaId
    #                }
    #                securityVulnerability{
    #                  vulnerableVersionRange
    #                }
    #                vulnerableManifestFilename
    #                vulnerableManifestPath
    #                vulnerableRequirements
    #              }
    #            }
    #          }
    #        }
    #    owner: ${{ github.repository_owner }}
    #    repo: ${{ github.event.repository.name }}
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}

    # - name: Save code scanning alerts in an environment variable
    #  env:
    #    JSON_RETURNED: ${{ steps.get_filtered_alerts.outputs.data }}
    #  run: |
    #    echo $JSON_RETURNED | jq '.repository.vulnerabilityAlerts'
    #    NODES=`echo $JSON_RETURNED | jq '.repository.vulnerabilityAlerts.nodes'`
    #    echo ::set-env name=alert_nodes::${NODES}
    #    echo $NODES
        
        
    # Loop through every node. For each node create an issue if it doesn't already exist
    #- name: Create issues
    #  run: |
    #    echo $alert_nodes | jq -r '.[].id' | while read id ; do
    #      echo $id
    #    done
